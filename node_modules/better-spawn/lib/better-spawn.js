(function() {
  var delimiter, isWin, resolve, spawn;

  ({spawn} = require("child_process"));

  isWin = process.platform === "win32";

  ({resolve, delimiter} = require("path"));

  module.exports = function(cmd, options) {
    var Promise, child, sh, shFlag, stdio, tmp;
    if (isWin) {
      sh = "cmd";
      shFlag = "/c";
      cmd = cmd.replace(/"/g, "\"");
    } else {
      sh = "sh";
      shFlag = "-c";
    }
    if (options == null) {
      options = {};
    }
    if (options.cwd == null) {
      options.cwd = process.cwd();
    }
    Promise = options.Promise || global.Promise;
    if (options.env == null) {
      options.env = JSON.parse(JSON.stringify(process.env));
      tmp = options.env.PATH.split(delimiter);
      tmp.push(resolve(options.cwd, "./node_modules/.bin"));
      options.env.PATH = tmp.join(delimiter);
    }
    if (options.stdio == null) {
      stdio = ["pipe"];
      stdio.push(options.noOut ? "pipe" : "inherit");
      stdio.push(options.noErr ? "pipe" : "inherit");
      options.stdio = stdio;
    }
    options.windowsVerbatimArguments = isWin;
    options.detached = !isWin;
    child = spawn(sh, [shFlag, cmd], options);
    child.cmd = cmd;
    child.isClosed = false;
    child.isKilled = false;
    child.closed = new Promise(function(res) {
      return child.on("close", function() {
        child.isClosed = true;
        return res(child);
      });
    });
    child.killed = new Promise(function(res) {
      return child.on("exit", function(exitCode, signal) {
        if (signal != null) {
          child.isKilled = true;
          return res(child);
        }
      });
    });
    child.close = function(signal) {
      if (signal == null) {
        signal = "SIGTERM";
      }
      if (!(child.isClosed || child.isKilled)) {
        child.isKilled = true;
        child.exitCode = 1;
        if (isWin) {
          child.kill(signal);
        } else {
          process.kill(-child.pid, signal);
        }
      }
      //spawn sh, [shFlag, "kill -INT -"+child.pid]
      return child.closed;
    };
    return child;
  };

}).call(this);
