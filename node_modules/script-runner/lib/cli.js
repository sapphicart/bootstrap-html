(function() {
  module.exports = function(args, test) {
    var arg, close, cmdGroup, cmdGroups, i, len, options, unit;
    options = {};
    unit = {};
    cmdGroup = {
      parallel: false,
      units: []
    };
    cmdGroups = [];
    for (i = 0, len = args.length; i < len; i++) {
      arg = args[i];
      if (arg[0] === "-") {
        switch (arg) {
          case "-s":
          case "--sequential":
            if (cmdGroup.units.length) {
              cmdGroups.push(cmdGroup);
            }
            cmdGroup = {
              parallel: false,
              units: []
            };
            break;
          case "-p":
          case "--parallel":
            if (cmdGroup.units.length) {
              cmdGroups.push(cmdGroup);
            }
            cmdGroup = {
              parallel: true,
              units: []
            };
            break;
          case "-w":
          case "--wait":
            cmdGroup.wait = true;
            break;
          case "-f":
          case "--first":
            cmdGroup.first = true;
            break;
          case "-m":
          case "--master":
            unit.master = true;
            break;
          case "-i":
          case "--ignore":
            unit.ignore = true;
            break;
          case "-v":
          case "--verbose":
            options.verbose = true;
            break;
          case "--silent":
            options.silent = true;
            break;
          case "--no-errors":
            options.noErr = true;
            break;
          case "-t":
          case "--test":
            options.test = true;
            break;
          case "-h":
          case "--help":
            console.log("usage: run [<options> [cmd..]..]\n\n\noptions:\n-h, --help         output usage information\n-v, --verbose      verbose logging (not implemented yet)\n    --silent       suppress output of children\n    --no-errors    also suppress error-output of children\n-t, --test         no running only show process structure\n-s, --sequential   following cmds will be run in sequence\n-p, --parallel     following cmds will be run in parallel\n-i, --ignore       the following cmd will be ignored for --first, --wait and errors\n-f, --first        only in parallel block: close all sibling processes after first exits\n-w, --wait         only in parallel block: will not close sibling processes on error\n-m, --master       only in parallel block: close all sibling processes when the following cmd exits. exitCode will only depend on master\n\nrun also looks in node_modules/.bin for cmds\nrun-para is a shorthand for run --parallel\nrun-seq is a longhand for run\nrun-npm will match cmd with npm script and replace them, usage of globs is allowed\ne.g. \n  run-npm -p build:* -s deploy");
            process.exit();
        }
      } else {
        unit.cmd = arg;
        cmdGroup.units.push(unit);
        unit = {};
      }
    }
    if (unit.cmd) {
      cmdGroup.units.push(unit);
    }
    if (cmdGroup.units.length) {
      cmdGroups.push(cmdGroup);
    }
    if (options.test) {
      if (test) {
        return cmdGroups;
      }
      return console.log(JSON.stringify(cmdGroups));
    }
    ({close} = require("./api")(cmdGroups, options, process.exit));
    process.on("SIGTERM", () => {
      return close("SIGTERM");
    });
    process.on("SIGINT", () => {
      return close("SIGINT");
    });
    return process.on("SIGHUP", () => {
      return close("SIGHUP");
    });
  };

}).call(this);
